class Solution {
public:
    typedef pair<int,int> P;
    int primsAlgo(vector<vector<P>> &adj,int V){
        vector<bool> vis(V,false);
        priority_queue<P,vector<P>,greater<P>> pq;
        pq.push({0,0});//{dist,node}
        int sum=0;
        while(!pq.empty()){
            auto p=pq.top();
            pq.pop();
            int d=p.first;
            int node=p.second;
            if(vis[node]==true)
            continue;
            vis[node]=true;
            sum+=d;
            for(auto &vec:adj[node]){
                int neigh=vec.first;
                int nwt=vec.second;
                if(vis[neigh]==false){
                    pq.push({nwt,neigh});

                }
            }
        }
        return sum;
    }
    int minCostConnectPoints(vector<vector<int>>& points) {
       int V=points.size();
       vector<vector<P>> adj(V);
       for(int i=0;i<V;i++){
        for(int j=i+1;j<V;j++){
            int x1=points[i][0];
            int y1=points[i][1];
            int x2=points[j][0];
            int y2=points[j][1];
            int dist=abs(x2-x1)+abs(y2-y1);
            adj[i].push_back({j,dist});
            adj[j].push_back({i,dist});

        }
       }
       return  primsAlgo(adj,V); 
    }
};
